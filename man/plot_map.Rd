% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting_functions.R
\name{plot_map}
\alias{plot_map}
\title{Create a map using a dataframe in the format required by ggplot2::geom_plot, for instance from map_ereefs() or map_ereefs_movie()}
\usage{
plot_map(
  datapoly,
  var_longname = "",
  var_units = "",
  Google_map_underlay = FALSE,
  scale_col = c("ivory", "coral4"),
  scale_lim = c(NA, NA),
  box_bounds = c(NA, NA, NA, NA),
  label_towns = TRUE,
  zoom = 6,
  p = NA,
  suppress_print = FALSE
)
}
\arguments{
\item{datapoly}{A dataframe in the format required by geom_plot(), as provided by map_ereefs() or map_ereefs_movie().}

\item{var_longname}{Character vector to use for the figure title.}

\item{var_units}{Units to include in the figure labelling.}

\item{Google_map_underlay}{Set to TRUE to use ggmap to show a Google Map as
an underlay for the model output plot. Requires the ggmap library and an activated Google API key.
Default now FALSE.}

\item{scale_col}{Vector of colours to use for the colour scale. This can be colours 
from the ggplot colour palette or a RGB hash code. Ignored for true_colour plots. 
If one value is given, low colour is set to ivory and high colour to the value given.
If two values are given, these are used as low and high limit colours.
If three values are given, the middle value is used to set the mid-point of the scale.
Defaults to c('ivory', 'coral4').}

\item{scale_lim}{Upper and lower bounds for colour scale. Defaults to full range of data.
Ignored for true_colour plots.}

\item{zoom}{Value of zoom passed to ggmap(). Set to 5 if you want to show the entire extent 
of eReefs models. Defaults to 6. Higher values will zoom in further.}

\item{p}{Handle for an existing figure if you want to add a layer instead of creating a new figure.
If p is provided, Google_map_underlay is over-ridden and set to FALSE.}

\item{suppress_print}{Default FALSE. If true, don't prdocue the map image.}
}
\value{
p Handle for the figure generated.
}
\description{
Plots a map figure in the same format as would be given by map_ereefs(), but using a pre-generated dataframe, instead of
processing data directly from ereefs netcdf files.
}
\examples{
\dontrun{
a <- map_ereefs('TN', return_poly=TRUE)
plot_map(a[[2]])
}
}
